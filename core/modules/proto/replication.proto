/*
 * LSST Data Management System
 * Copyright 2011-2017 LSST Corporation.
 *
 * This product includes software developed by the
 * LSST Project (http://www.lsst.org/).
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the LSST License Statement and
 * the GNU General Public License along with this program.  If not,
 * see <http://www.lsstcorp.org/LegalNotices/>.
 */
/// replication.proto
/// This defines the wire-messages sent between replication master and workers.

package lsst.qserv.proto;

//////////////////////////////////////////////////////////////////////
// Replication header sent to a worker. Any communication begins with
// sending this header and specifying a type of the request.
//
// Chunk replication requests must be followed by another message of
// the corresponding type to provide a scope of the request.
//
// Requests affecting the overall status of the service do not require
// any additional messages.

message ReplicationRequestHeader {

    enum Type {

        // Chunk replication requests

        REPLICATE = 0;
        STOP      = 1;
        STATUS    = 2;
        
        // Requests affecting the overall state of the worker replication
        // service

        SERVICE_SUSPEND = 3;
        SERVICE_RESUME  = 4;
        SERVICE_STATUS  = 5;
    }
    required Type type = 1;
}

////////////////////////////////////////////////////////////////////////////////
// This is a replication request. The message defines a scope of the request and
// its unique identity. This message is sent once after the header.

message ReplicationRequestReplicate {
    required string database = 1;
    required int32  chunk = 2;
    required string id = 3;
}

//////////////////////////////////////////////////////////////////////////////////////
// This request is sent to stop an on-going replication (if any is still in progress).
// This message is sent once after the header.

message ReplicationRequestStop {
    required string id = 1;
}


//////////////////////////////////////////////////////////////////////////////
// This request is sent to request a status of an on-going replication (if any
// is still in progress). This message is sent once after the header.

message ReplicationRequestStatus {
    required string id = 1;
}

/////////////////////////////////////////////////////////////
// These messages are expected by master upon a completion of
// the corresponding replication operations.

enum ReplicationStatus {
    SUCCESS       = 0;
    QUEUED        = 1;
    IN_PROGRESS   = 2;
    IS_CANCELLING = 3;
    SUSPENDED     = 4;
    BAD           = 5;
    FAILED        = 6;
    CANCELLED     = 7;
}
message ReplicationResponseReplicate {
    required ReplicationStatus status = 1;
}
message ReplicationResponseStop {
    required ReplicationStatus status = 1;
}
message ReplicationResponseStatus {
    required ReplicationStatus status = 1;
}


/////////////////////////////////////////////////////////////////////////
// The message returned in response to requests related to (or affecting)
// the overall state of the sorker-side replication service.

message ReplicationServiceResponse {

    // Completion status of the operation
    
    enum Status {
        SUCCESS = 0;
        FAILED  = 1;
    }
    required Status status = 1;

    enum ServiceState {
        SUSPEND_IN_PROGRESS = 0;
        SUSPENDED           = 1;
        RUNNING             = 2;
    }
    required ServiceState service_state = 2;

    // Counters for requests known to the service since its last start

    required uint32 num_new_requests         = 3;
    required uint32 num_in_progress_requests = 4;
    required uint32 num_finished_requests    = 5;

}