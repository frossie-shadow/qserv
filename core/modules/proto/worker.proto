/*
 * LSST Data Management System
 * Copyright 2011-2015 LSST Corporation.
 *
 * This product includes software developed by the
 * LSST Project (http://www.lsst.org/).
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the LSST License Statement and
 * the GNU General Public License along with this program.  If not,
 * see <http://www.lsstcorp.org/LegalNotices/>.
 */
/// worker.proto
/// This defines the wire-messages sent between czar and worker.

package lsst.qserv.proto;

// Query message sent to worker
// One of these Task objects should be sent.
message TaskMsg {
    optional int64 session = 1;
    // Future: might have multiple db/chunk dependencies.
    optional string db = 2;
    optional int32 chunkid = 3;
    // repeated string scantables = 4;  // obsolete
    optional string user = 6;
    optional int32 protocol = 7; // Null or 1: original mysqldump, 2: row-based result
    optional int32 scanpriority = 8;
    message Subchunk {
        optional string database = 1; // database (unused)
        repeated string table = 2; // subchunked tables
        repeated int32 id = 3; // subchunk ids
    }
    message Fragment {
        // A query fragment without "CREATE or INSERT".
        // Worker should synthesize.
        repeated string query = 1;
        optional string resulttable = 3;
        optional Subchunk subchunks = 4; // Only needed with subchunk-ed queries

        // Each fragment may only write results to one table,
        // but multiple fragments may write to the same table,
        // in which case the table contains a concatenation of the
        // contributing fragments' rows.
    }
    repeated Fragment fragment = 5;
    message ScanTable {
        required string db = 1;
        required string table = 2;
        required bool lockInMemory = 3;
        required int32 scanRating = 4;
    }
    repeated ScanTable scantable = 9;
    required uint64 queryid = 10;
    required int32 jobid = 11;
    required bool scaninteractive = 12;
}

// Result message received from worker
// One of these headers is sent, if the czar requests result bundling.
// If sent, an int64 size (network-byte-ordered) is always sent before
// the ResultHeader message, indicating the size of the ResultHeader
// object.
// The Header message contains size information so each result can be
// distinguished.
// This message must be 255 characters or less, because its size is
// transmitted as an unsigned char.
message ProtoHeader {
    optional fixed32 protocol = 1;
    required sfixed32 size = 2; // protobufs discourages messages > megabytes
    optional bytes md5 = 3;
    optional string wname = 4; 
    required bool largeresult = 5;
}

message ColumnSchema {
    optional string name = 1; // Optional to allow type-only transmission
    required bool hasdefault = 2; // unambiguous flag--
    // has_defaultvalue() often tests true even after clear_defaultvalue()
    optional bytes defaultvalue = 3;
    required string sqltype = 4;
    optional int32 mysqltype = 5;
}
message RowSchema {
    repeated ColumnSchema columnschema = 1;
}
message RowBundle {
    repeated bytes column = 1; // bytes to allow BLOB encoding
    repeated bool isnull = 2; // Flag to allow sending nulls.
}

message Result {
    required bool continues = 1; // Are there additional Result messages
    optional int64 session = 2;
    required RowSchema rowschema = 3;
    optional int32 errorcode = 4;
    optional string errormsg = 5;
    repeated RowBundle row = 6;
    required uint64 queryid = 7;
    required int32 jobid = 8;
    required bool largeresult = 9;
    required uint32 rowcount = 10;
    required uint64 transmitsize = 11;
}

// Result protocol 2:
// Byte 0: N = unsigned char size of ProtoHeader
// Byte 1-N: ProtoHeader message
// Byte N+1, extent = ProtoHeader.size, Result msg
// (successive Result msgs indicated by size markers in previous Result msgs)
